diff --git a/Configure b/Configure
index bdcfaf1..1824010 100755
--- a/Configure
+++ b/Configure
@@ -4703,7 +4703,7 @@ else
 fi
 $rm -f try try.*
 case "$gccversion" in
-1*) cpp=`./loc gcc-cpp $cpp $pth` ;;
+1.*) cpp=`./loc gcc-cpp $cpp $pth` ;;
 esac
 case "$gccversion" in
 '') gccosandvers='' ;;
@@ -4743,7 +4743,7 @@ esac
 # gcc 3.* complain about adding -Idirectories that they already know about,
 # so we will take those off from locincpth.
 case "$gccversion" in
-3*)
+3.*)
     echo "main(){}">try.c
     for incdir in $locincpth; do
        warn=`$cc $ccflags -I$incdir -c try.c 2>&1 | \
@@ -5469,13 +5469,13 @@ fi
 case "$hint" in
 default|recommended)
 	case "$gccversion" in
-	1*) dflt="$dflt -fpcc-struct-return" ;;
+	1.*) dflt="$dflt -fpcc-struct-return" ;;
 	esac
 	case "$optimize:$DEBUGGING" in
 	*-g*:old) dflt="$dflt -DDEBUGGING";;
 	esac
 	case "$gccversion" in
-	2*) if $test -d /etc/conf/kconfig.d &&
+	2.*) if $test -d /etc/conf/kconfig.d &&
 			$contains _POSIX_VERSION $usrinc/sys/unistd.h >/dev/null 2>&1
 		then
 			# Interactive Systems (ISC) POSIX mode.
@@ -5484,7 +5484,7 @@ default|recommended)
 		;;
 	esac
 	case "$gccversion" in
-	1*) ;;
+	1.*) ;;
 	2.[0-8]*) ;;
 	?*)	set strict-aliasing -fno-strict-aliasing
 		eval $checkccflag
@@ -5602,7 +5602,7 @@ case "$cppflags" in
     ;;
 esac
 case "$gccversion" in
-1*) cppflags="$cppflags -D__GNUC__"
+1.*) cppflags="$cppflags -D__GNUC__"
 esac
 case "$mips_type" in
 '');;
@@ -23612,7 +23612,7 @@ fi
 
 : add -D_FORTIFY_SOURCE if feasible and not already there
 case "$gccversion" in
-[4567].*)	case "$optimize$ccflags" in
+[456789].*|[1-9][0-9]*)	case "$optimize$ccflags" in
 	*-O*)	case "$ccflags$cppsymbols" in
 		*_FORTIFY_SOURCE=*) # Don't add it again.
 			echo "You seem to have -D_FORTIFY_SOURCE already, not adding it." >&4
diff --git a/cpan/ExtUtils-MakeMaker/lib/ExtUtils/Liblist/Kid.pm b/cpan/ExtUtils-MakeMaker/lib/ExtUtils/Liblist/Kid.pm
index a7fae86..bf35d3e 100644
--- a/cpan/ExtUtils-MakeMaker/lib/ExtUtils/Liblist/Kid.pm
+++ b/cpan/ExtUtils-MakeMaker/lib/ExtUtils/Liblist/Kid.pm
@@ -165,6 +165,10 @@ sub _unix_os2_ext {
                 && -f ( $fullname = "$thispth/lib$thislib.$Config_dlext" ) )
             {
             }
+            elsif ( $^O eq 'darwin' && require DynaLoader && defined &DynaLoader::dl_load_file
+                && DynaLoader::dl_load_file( $fullname = "$thispth/lib$thislib.$so", 0 ) )
+            {
+            }
             elsif ( -f ( $fullname = "$thispth/$thislib$Config_libext" ) ) {
             }
             elsif ( -f ( $fullname = "$thispth/lib$thislib.dll$Config_libext" ) ) {
diff --git a/cpan/Time-Local/t/Local.t b/cpan/Time-Local/t/Local.t
index 6341396..701d22d 100644
--- a/cpan/Time-Local/t/Local.t
+++ b/cpan/Time-Local/t/Local.t
@@ -85,19 +85,17 @@ my $epoch_is_64
 
 for ( @time, @neg_time ) {
     my ( $year, $mon, $mday, $hour, $min, $sec ) = @$_;
-    $year -= 1900;
     $mon--;
 
 SKIP: {
         skip '1970 test on VOS fails.', 12
-            if $^O eq 'vos' && $year == 70;
+            if $^O eq 'vos' && $year == 1970;
         skip 'this platform does not support negative epochs.', 12
-            if $year < 70 && !$neg_epoch_ok;
+            if $year < 1970 && !$neg_epoch_ok;
 
         # Test timelocal()
         {
-            my $year_in = $year < 70 ? $year + 1900 : $year;
-            my $time = timelocal( $sec, $min, $hour, $mday, $mon, $year_in );
+            my $time = timelocal( $sec, $min, $hour, $mday, $mon, $year );
 
             my ( $s, $m, $h, $D, $M, $Y ) = localtime($time);
 
@@ -106,13 +104,12 @@ SKIP: {
             is( $h, $hour,     "timelocal hour for @$_" );
             is( $D, $mday,     "timelocal day for @$_" );
             is( $M, $mon,      "timelocal month for @$_" );
-            is( $Y, $year,     "timelocal year for @$_" );
+            is( $Y, $year - 1900,     "timelocal year for @$_" );
         }
 
         # Test timegm()
         {
-            my $year_in = $year < 70 ? $year + 1900 : $year;
-            my $time = timegm( $sec, $min, $hour, $mday, $mon, $year_in );
+            my $time = timegm( $sec, $min, $hour, $mday, $mon, $year );
 
             my ( $s, $m, $h, $D, $M, $Y ) = gmtime($time);
 
@@ -121,14 +118,13 @@ SKIP: {
             is( $h, $hour,     "timegm hour for @$_" );
             is( $D, $mday,     "timegm day for @$_" );
             is( $M, $mon,      "timegm month for @$_" );
-            is( $Y, $year,     "timegm year for @$_" );
+            is( $Y, $year - 1900,     "timegm year for @$_" );
         }
     }
 }
 
 for (@bad_time) {
     my ( $year, $mon, $mday, $hour, $min, $sec ) = @$_;
-    $year -= 1900;
     $mon--;
 
     eval { timegm( $sec, $min, $hour, $mday, $mon, $year ) };
@@ -229,6 +225,30 @@ SKIP:
     );
 }
 
+# 2-digit years
+{
+	my $current_year = ( localtime() )[5];
+	my $pre_break    = ( $current_year + 49 ) - 100;
+	my $break        = ( $current_year + 50 ) - 100;
+	my $post_break   = ( $current_year + 51 ) - 100;
+
+	is(
+		( ( localtime( timelocal( 0, 0, 0, 1, 1, $pre_break ) ) )[5] ),
+		$pre_break + 100,
+		"year $pre_break is treated as next century",
+	);
+	is(
+		( ( localtime( timelocal( 0, 0, 0, 1, 1, $break ) ) )[5] ),
+		$break + 100,
+		"year $break is treated as next century",
+	);
+	is(
+		( ( localtime( timelocal( 0, 0, 0, 1, 1, $post_break ) ) )[5] ),
+		$post_break,
+		"year $post_break is treated as current century",
+	);
+}
+
 SKIP:
 {
     skip 'These tests only run for the package maintainer.', 8
diff --git a/ext/DynaLoader/DynaLoader_pm.PL b/ext/DynaLoader/DynaLoader_pm.PL
index bd95625..1e58349 100644
--- a/ext/DynaLoader/DynaLoader_pm.PL
+++ b/ext/DynaLoader/DynaLoader_pm.PL
@@ -499,12 +499,18 @@ sub dl_findfile {
             foreach $name (@names) {
 		my($file) = "$dir$dirsep$name";
                 print STDERR " checking in $dir for $name\n" if $dl_debug;
-		$file = ($do_expand) ? dl_expandspec($file) : (-f $file && $file);
-		#$file = _check_file($file);
-		if ($file) {
+		if ($do_expand && ($file = dl_expandspec($file))) {
+                    push @found, $file;
+                    next arg; # no need to look any further
+		}
+		elsif (-f $file) {
                     push(@found, $file);
                     next arg; # no need to look any further
                 }
+		elsif (dl_load_file($file, 0)) {
+                    push @found, $file;
+                    next arg; # no need to look any further
+		}
             }
         }
     }
diff --git a/hints/darwin.sh b/hints/darwin.sh
index 690fe4e..fdfbdd4 100644
--- a/hints/darwin.sh
+++ b/hints/darwin.sh
@@ -301,7 +301,7 @@ case "$osvers" in  # Note: osvers is the kernel version, not the 10.x
    # We now use MACOSX_DEPLOYMENT_TARGET, if set, as an override by
    # capturing its value and adding it to the flags.
     case "$MACOSX_DEPLOYMENT_TARGET" in
-    10.*)
+    [1-9][0-9].*)
       add_macosx_version_min ccflags $MACOSX_DEPLOYMENT_TARGET
       add_macosx_version_min ldflags $MACOSX_DEPLOYMENT_TARGET
       ;;
@@ -313,7 +313,7 @@ case "$osvers" in  # Note: osvers is the kernel version, not the 10.x
 
 *** Unexpected MACOSX_DEPLOYMENT_TARGET=$MACOSX_DEPLOYMENT_TARGET
 ***
-*** Please either set it to 10.something, or to empty.
+*** Please either set it to a valid macOS version number (e.g., 10.15) or to empty.
 
 EOM
       exit 1
@@ -327,7 +327,7 @@ EOM
     # "ProductVersion:    10.11"     "10.11"
         prodvers=`sw_vers|awk '/^ProductVersion:/{print $2}'|awk -F. '{print $1"."$2}'`
     case "$prodvers" in
-    10.*)
+    [1-9][0-9].*)
       add_macosx_version_min ccflags $prodvers
       add_macosx_version_min ldflags $prodvers
       ;;
@@ -342,12 +342,19 @@ EOM
       exit 1
     esac
 
-    # The X in 10.X
-    prodvers_minor=$(echo $prodvers|awk -F. '{print $2}')
+    darwin_major=$(echo $osvers|awk -F. '{print $1}')
 
-    # macOS (10.12) deprecated syscall().
-    if [ "$prodvers_minor" -ge 12 ]; then
+    # macOS 10.12 (darwin 16.0.0) deprecated syscall().
+    if [ "$darwin_major" -ge 16 ]; then
         d_syscall='undef'
+        # If deploying to pre-10.12, suppress Time::HiRes's detection of the system clock_gettime()
+        case "$MACOSX_DEPLOYMENT_TARGET" in
+          10.[6-9]|10.10|10.11)
+          ccflags="$ccflags -Werror=partial-availability -D_DARWIN_FEATURE_CLOCK_GETTIME=0"
+          ;;
+        *)
+          ;;
+        esac
     fi
 
    lddlflags="${ldflags} -bundle -undefined dynamic_lookup"
@@ -511,3 +518,20 @@ if test "$d_unsetenv" = "$define" -a \
         ccflags="$ccflags -DPERL_USE_SAFE_PUTENV"
 fi
 EOOVER
+
+# if you use a newer toolchain before OS X 10.9 these functions may be
+# incorrectly detected, so disable them
+# OS X 10.10.x corresponds to kernel 14.x
+case "$osvers" in
+    [1-9].*|1[0-3].*)
+	d_linkat=undef
+	d_openat=undef
+	d_renameat=undef
+	d_unlinkat=undef
+	d_fchmodat=undef
+	;;
+esac
+
+# mkostemp() was autodetected as present but found to not be linkable
+# on 15.6.0.  Unknown what other OS versions are affected.
+d_mkostemp=undef
diff --git a/pp.c b/pp.c
index fbba3bd..1e0a5eb 100644
--- a/pp.c
+++ b/pp.c
@@ -3737,8 +3737,12 @@ PP(pp_crypt)
 #if defined(__GLIBC__) || defined(__EMX__)
 	if (PL_reentrant_buffer->_crypt_struct_buffer) {
 	    PL_reentrant_buffer->_crypt_struct_buffer->initialized = 0;
-	    /* work around glibc-2.2.5 bug */
+#if (defined(__GLIBC__) && __GLIBC__ == 2) && \
+    (defined(__GLIBC_MINOR__) && __GLIBC_MINOR__ >= 2 && __GLIBC_MINOR__ < 4)
+	    /* work around glibc-2.2.5 bug, has been fixed at some
+	     * time in glibc-2.3.X */
 	    PL_reentrant_buffer->_crypt_struct_buffer->current_saltbits = 0;
+#endif
 	}
 #endif
     }
